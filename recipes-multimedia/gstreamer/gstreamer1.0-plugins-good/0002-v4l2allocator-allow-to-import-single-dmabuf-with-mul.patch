From 1e4e795fc09cbaf475af5cf0a64dd267daf1d1c0 Mon Sep 17 00:00:00 2001
From: Hou Qi <qi.hou@nxp.com>
Date: Tue, 15 Nov 2022 09:16:55 +0800
Subject: [PATCH 2/2] v4l2allocator: allow to import single dmabuf with multi
 planes

This is to be compatible with the case where multi planes share
one fd.

Part-of: <https://gitlab.freedesktop.org/gstreamer/gst-plugins-good/-/merge_requests/1096>
---
 sys/v4l2/gstv4l2allocator.c  | 118 ++++++++++++++++++++++++++++-------
 sys/v4l2/gstv4l2allocator.h  |   3 +-
 sys/v4l2/gstv4l2bufferpool.c |   5 +-
 3 files changed, 102 insertions(+), 24 deletions(-)

diff --git a/sys/v4l2/gstv4l2allocator.c b/sys/v4l2/gstv4l2allocator.c
index 505387d88..0104636d2 100644
--- a/sys/v4l2/gstv4l2allocator.c
+++ b/sys/v4l2/gstv4l2allocator.c
@@ -31,6 +31,7 @@
 #include "gstv4l2allocator.h"
 
 #include <gst/allocators/gstdmabuf.h>
+#include <gst/video/gstvideometa.h>
 
 #include <fcntl.h>
 #include <string.h>
@@ -1090,44 +1091,117 @@ gst_v4l2_allocator_alloc_userptr (GstV4l2Allocator * allocator)
 
 gboolean
 gst_v4l2_allocator_import_dmabuf (GstV4l2Allocator * allocator,
-    GstV4l2MemoryGroup * group, gint n_mem, GstMemory ** dma_mem)
+    GstV4l2MemoryGroup * group, gint n_mem, GstMemory ** dma_mem,
+    GstVideoMeta * vmeta)
 {
   GstV4l2Object *obj = allocator->obj;
-  GstV4l2Memory *mem;
-  gint i;
+  GstV4l2Memory *mem, *mem_tmp;
+  gint i = 0;
+  gint dmafd;
+  gsize size, offset, maxsize;
 
   g_return_val_if_fail (allocator->memory == V4L2_MEMORY_DMABUF, FALSE);
 
-  if (group->n_mem != n_mem)
-    goto n_mem_missmatch;
+  if (vmeta) {
+    if (group->n_mem != vmeta->n_planes)
+      goto n_mem_missmatch;
+  } else {
+    if (group->n_mem != n_mem)
+      goto n_mem_missmatch;
+  }
 
-  for (i = 0; i < group->n_mem; i++) {
-    gint dmafd;
-    gsize size, offset, maxsize;
+  if (group->n_mem == n_mem) {
+    for (i = 0; i < group->n_mem; i++) {
+      if (!gst_is_dmabuf_memory (dma_mem[i]))
+        goto not_dmabuf;
 
-    if (!gst_is_dmabuf_memory (dma_mem[i]))
-      goto not_dmabuf;
+      size = gst_memory_get_sizes (dma_mem[i], &offset, &maxsize);
+      dmafd = gst_dmabuf_memory_get_fd (dma_mem[i]);
 
-    size = gst_memory_get_sizes (dma_mem[i], &offset, &maxsize);
+      GST_LOG_OBJECT (allocator, "[%i] imported DMABUF as fd %i plane %d",
+          group->buffer.index, dmafd, i);
 
-    dmafd = gst_dmabuf_memory_get_fd (dma_mem[i]);
+      mem = (GstV4l2Memory *) group->mem[i];
 
-    GST_LOG_OBJECT (allocator, "[%i] imported DMABUF as fd %i plane %d",
-        group->buffer.index, dmafd, i);
+      /* Update memory */
+      mem->mem.maxsize = maxsize;
+      mem->mem.offset = offset;
+      mem->mem.size = size;
+      mem->dmafd = dmafd;
 
-    mem = (GstV4l2Memory *) group->mem[i];
+      /* Update v4l2 structure */
+      group->planes[i].length = maxsize;
+      group->planes[i].bytesused = size + offset;
+      group->planes[i].m.fd = dmafd;
+      group->planes[i].data_offset = offset;
+    }
+  } else if (n_mem == 1) {      // in case all planes are in one memory block
+    if (!gst_is_dmabuf_memory (dma_mem[0]))
+      goto not_dmabuf;
+
+    size = gst_memory_get_sizes (dma_mem[0], &offset, &maxsize);
+    dmafd = gst_dmabuf_memory_get_fd (dma_mem[0]);
+
+    GST_LOG_OBJECT (allocator, "%d planes are in 1 memory block",
+        vmeta->n_planes);
+
+    mem = (GstV4l2Memory *) group->mem[0];
 
     /* Update memory */
-    mem->mem.maxsize = maxsize;
-    mem->mem.offset = offset;
-    mem->mem.size = size;
+    mem->mem.maxsize = vmeta->offset[1];
+    mem->mem.offset = vmeta->offset[0];
+    mem->mem.size = vmeta->offset[1];
     mem->dmafd = dmafd;
 
     /* Update v4l2 structure */
-    group->planes[i].length = maxsize;
-    group->planes[i].bytesused = size + offset;
-    group->planes[i].m.fd = dmafd;
-    group->planes[i].data_offset = offset;
+    group->planes[0].length = mem->mem.maxsize;
+    group->planes[0].bytesused = mem->mem.size;
+    group->planes[0].m.fd = dmafd;
+    group->planes[0].data_offset = mem->mem.offset;
+
+    if (group->n_mem == 2) {
+      mem = (GstV4l2Memory *) group->mem[1];
+
+      /* Update memory */
+      mem->mem.maxsize = maxsize;
+      mem->mem.offset = vmeta->offset[1];
+      mem->mem.size = size;
+      mem->dmafd = dmafd;
+
+      /* Update v4l2 structure */
+      group->planes[1].length = mem->mem.maxsize;
+      group->planes[1].bytesused = mem->mem.size;
+      group->planes[1].m.fd = dmafd;
+      group->planes[1].data_offset = mem->mem.offset;
+    } else if (group->n_mem == 3) {
+      mem = (GstV4l2Memory *) group->mem[1];
+
+      /* Update memory */
+      mem->mem.maxsize = vmeta->offset[2];
+      mem->mem.offset = vmeta->offset[1];
+      mem->mem.size = vmeta->offset[2];
+      mem->dmafd = dmafd;
+
+      /* Update v4l2 structure */
+      group->planes[1].length = mem->mem.maxsize;
+      group->planes[1].bytesused = mem->mem.size;
+      group->planes[1].m.fd = dmafd;
+      group->planes[1].data_offset = mem->mem.offset;
+
+      mem = (GstV4l2Memory *) group->mem[2];
+
+      /* Update memory */
+      mem->mem.maxsize = maxsize;
+      mem->mem.offset = vmeta->offset[2];
+      mem->mem.size = size;
+      mem->dmafd = dmafd;
+
+      /* Update v4l2 structure */
+      group->planes[2].length = mem->mem.maxsize;
+      group->planes[2].bytesused = mem->mem.size;
+      group->planes[2].m.fd = dmafd;
+      group->planes[2].data_offset = mem->mem.offset;
+    }
   }
 
   /* Copy into buffer structure if not using planes */
diff --git a/sys/v4l2/gstv4l2allocator.h b/sys/v4l2/gstv4l2allocator.h
index eb515245a..7977d66ed 100644
--- a/sys/v4l2/gstv4l2allocator.h
+++ b/sys/v4l2/gstv4l2allocator.h
@@ -141,7 +141,8 @@ GstV4l2MemoryGroup * gst_v4l2_allocator_alloc_userptr  (GstV4l2Allocator * alloc
 
 gboolean             gst_v4l2_allocator_import_dmabuf  (GstV4l2Allocator * allocator,
                                                         GstV4l2MemoryGroup *group,
-                                                        gint n_mem, GstMemory ** dma_mem);
+                                                        gint n_mem, GstMemory ** dma_mem,
+                                                        GstVideoMeta *vmeta);
 
 gboolean             gst_v4l2_allocator_import_userptr (GstV4l2Allocator * allocator,
                                                         GstV4l2MemoryGroup *group,
diff --git a/sys/v4l2/gstv4l2bufferpool.c b/sys/v4l2/gstv4l2bufferpool.c
index 4bf5da45b..bfeeb6c8b 100644
--- a/sys/v4l2/gstv4l2bufferpool.c
+++ b/sys/v4l2/gstv4l2bufferpool.c
@@ -367,6 +367,7 @@ gst_v4l2_buffer_pool_import_dmabuf (GstV4l2BufferPool * pool,
   GstV4l2MemoryGroup *group = NULL;
   GstMemory *dma_mem[GST_VIDEO_MAX_PLANES] = { 0 };
   guint n_mem = gst_buffer_n_memory (src);
+  GstVideoMeta *vmeta;
   gint i;
 
   GST_LOG_OBJECT (pool, "importing dmabuf");
@@ -374,6 +375,8 @@ gst_v4l2_buffer_pool_import_dmabuf (GstV4l2BufferPool * pool,
   if (!gst_v4l2_is_buffer_valid (dest, &group))
     goto not_our_buffer;
 
+  vmeta = gst_buffer_get_video_meta (src);
+
   if (n_mem > GST_VIDEO_MAX_PLANES)
     goto too_many_mems;
 
@@ -381,7 +384,7 @@ gst_v4l2_buffer_pool_import_dmabuf (GstV4l2BufferPool * pool,
     dma_mem[i] = gst_buffer_peek_memory (src, i);
 
   if (!gst_v4l2_allocator_import_dmabuf (pool->vallocator, group, n_mem,
-          dma_mem))
+          dma_mem, vmeta))
     goto import_failed;
 
   gst_mini_object_set_qdata (GST_MINI_OBJECT (dest), GST_V4L2_IMPORT_QUARK,
-- 
2.17.1

